When we need to create a structure in a way that the objects in the structure has to be treated the same way, we can apply composite design pattern.


Component (Employee)
- declares interface for objects in composition.
- implements deafault behaviour for the interface common to all classes as appropriate.
- declares an interface for accessing and managing its child components.
Leaf (Developer)
- represents leaf objects in the composition.A leaf has no children.
- defines behaviour for primitive objects in the composition.
Composite (Manager). Key point here is that all common method delegates its operations to child objects.It has method to access and modify its children.
- defines behaviour for components having children.
- stores child components.
- implements child related operations in the component interface.
Client
- manipulates objects in the composition through the component interface.


Uses
java.util.Map#putAll(Map)
java.util.List#addAll(Collection)
java.util.Set#addAll(Collection)

NOTE
When we create the graph from the code we do it from bottom to top and it uses a kind of RECURSION.

Related parents:
Decorator - used with Composite
Flyweight
Iterator
Visitor